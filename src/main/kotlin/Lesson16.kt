fun main(){
    val dog = Dog()
}
//1 Создайте класс Animal с функцией makeSound(), которая выводит звук, издаваемый животным.
//
open class Animal{
    open fun makeSound(){
        println("sound")
    }
    var name: String = "ИМЯ"
}
//2 Создайте подклассы Dog и Cat, которые наследуются от Animal и переопределяют функцию makeSound() для издания соответствующих звуков.
//
class Dog: Animal(){
    override fun makeSound(){
        println("Dog sound")
    }
}
class Cat: Animal(){
    override fun makeSound(){
        println("Cat sound")
    }
}
//3 Добавьте в класс Animal свойство name, которое будет хранить имя животного.
//
//4 Создайте класс WildAnimal, который наследуется от Animal и добавляет свойство isPredator, указывающее, является ли животное хищником.
//
class WildAnimal: Animal(){
    
}
//5 Реализуйте класс DomesticAnimal, который также наследуется от Animal и добавляет свойство owner, содержащее информацию о владельце.
//
//6 Создайте интерфейс Pet, который содержит функцию play(). Реализуйте этот интерфейс в классе DomesticAnimal.
//
//7 Создайте абстрактный класс Shape с абстрактной функцией calculateArea().
//
//8 Создайте подклассы Circle и Rectangle, которые наследуются от Shape и реализуют функцию calculateArea() для вычисления площади круга и прямоугольника соответственно.
//
//9 Реализуйте класс Square, который также наследуется от Shape и переопределяет функцию calculateArea() для вычисления площади квадрата.
//
//10 Создайте класс Employee с полями name и salary.
//
//11 Создайте классы Manager и RegularEmployee, которые наследуются от Employee и добавляют дополнительное поле teamSize для менеджера и department для обычного сотрудника.
//
//12 Реализуйте класс Vehicle с полями make, model и year.
//
//13 Создайте классы Car и Motorcycle, которые наследуются от Vehicle и добавляют свои собственные поля, например, numDoors для машины и engineType для мотоцикла.
//
//14 Создайте класс BankAccount с полями accountNumber, balance и функциями deposit() и withdraw().
//
//15 Создайте классы SavingsAccount и CheckingAccount, которые наследуются от BankAccount и добавляют свои собственные функции, например, calculateInterest() для сберегательного счета и deductFees() для расчетного счета.
//
//16 Реализуйте иерархию классов для игры, в которой есть базовый класс Game, от которого наследуются классы BoardGame и CardGame, а от них уже наследуются конкретные игры, например, Chess и Poker.
//
//17 Создайте класс Person с полями name, age и функцией speak().
//
//18 Создайте классы Teacher и Student, которые наследуются от Person и добавляют свои собственные поля и функции, например, subject для учителя и grade для студента.
//
//19 Реализуйте класс Shape с функцией draw(), которая выводит на экран символы, представляющие фигуру.
//
//20 Создайте классы Circle, Square и Triangle, которые наследуются от Shape и реализуют функцию draw() для отображения соответствующих геометрических фигур.