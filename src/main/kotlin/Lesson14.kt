fun main(){
//  1  Создайте пустую Map с типом ключа String и типом значения Int.
// Все типы могут быть как и в ключе так и в значении
    val map = mutableMapOf<String,Int>()
    println(map)
//   2 Добавьте несколько элементов в Map и выведите их на экран.
//
    map.put("key-zero",4)
    map.put("key-one",7)
    map.put("key-two",8)
    println(map)
//   3 Проверьте, содержит ли Map определенный ключ.
// Проверяет через сверку с хэшкодом
    println(map.containsKey("key-one"))
    println(map.containsKey("key"))
//   4 Получите значение по ключу из Map и выведите его на экран. Если ключ отсутствует, выведите сообщение об ошибке.
//
    val boolean: Boolean = map.containsKey("key")
    if (boolean == false){
        println("Ошибка")
    }else{
       println(map.get("key"))
    }


    val boolean2: Boolean = map.containsKey("key-zero")
    if (boolean2 == false){
        println("Ошибка")
    }else{
        println(map.get("key-zero"))
    }
//  5  Удалите элемент из Map по ключу и выведите измененную Map.
//
    map.remove("key-zero")
    println(map)
//  6  Переберите все элементы Map и выведите их на экран в виде "Ключ: Значение".
//
    for (i in map){
        println("Ключ ${i.key}: Значение ${map.getValue(i.key)}")
    }
//   7 Создайте новую Map, объединив две существующие Map. В случае конфликта ключей используйте значения из первой Map.
//
    val newmap = mutableMapOf("key-one" to 4,"key-new-one" to 5, "key-new-two" to 44,"key-new-three" to 5)
    map.putAll(newmap)
    println(map)
//    8 Создайте Map, и отсортируйте так, чтобы она содержала только элементы, у которых значение больше заданного.
    val map01 = mutableMapOf("1" to 1, "2" to 2,"3" to 3)
    println(map01.filter { it.value>2 })
//    9 Создайте Map,  и отсортируйте так, чтобы она содержала только элементы у которых ключ начинается с определенной буквы.
    val map02 = mutableMapOf(Pair("111", 1), Pair("122", 10),Pair("333", 1),Pair("1", 100))
    println(map02.filter { it.key[0]=='1' })
//   10 Создайте Map из списка пар ключ-значение.
//    Функция мап берет список и каждому элементу добавляет
    val spisok = listOf("123" to 570,"456" to 55,"789" to 69)
    val map2 = spisok.toMap()
    println(map2)

//    1 Напишите функцию, которая принимает на вход Map и возвращает новую Map,
//    в которой ключи и значения поменяны местами.

//    2 Реализуйте функцию, которая принимает на вход две Map, объединяет их,
//    и возвращает новую Map, в которой значения для общих ключей складываются.

//    3 Реализуйте функцию, которая принимает на вход Map и возвращает список
//    уникальных значений из всех элементов Map.

//    4 Реализуйте функцию, которая принимает на вход Map (ключ Int) и возвращает новую Map,
//    содержащую только те элементы исходной Map, для которых ключи находятся в определенном диапазоне.

//    5 Напишите функцию, которая принимает на вход Map и возвращает новую Map,
//    в которой значения представлены в виде суммы всех предыдущих значений.

//    6 Реализуйте функцию, которая принимает на вход Map и возвращает новую Map,
//    в которой значения умножены на их позицию в Map (индекс + 1). Здесь брать не индекс ключей или значений, а индекс списка объектов ключ-значение aka entries
}