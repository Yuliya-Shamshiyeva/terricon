//Анонимные функции
//inline
//fun example(lambda: (Int) -> Int) {
//    println(lambda(5))
//}
//fun main(){
//    example(fun(a: Int): Int =  a)
//}

//1. Почему функция println(24) не вызовется?
//fun main() {
//    println(42)
//
//    example {
//        return
//    }
//    println(24)
//}
////останавливает, загвоздка в ретерне
////В Kotlin вы можете использовать обыкновенный, безусловный return только
////для выхода из именованной или анонимной функции. Это значит, что для выхода
////из лямбды вам нужно использовать метку. Обычный return запрещён внутри лямбды,
////потому что она не может заставить внешнюю функцию завершиться.
//return только для выхода из именованной или анонимной функции.
////Мы типа кладем в остановку в функцию и и выходим из мейн
//inline fun example(lambda: () -> Unit) {
//    lambda()
//}
////2. Почему данные код не скомпилируется?
//fun main() {
//    println(42)
//    example {
//        return
//    }
//    println(24)
//}
//
//fun example(lambda: () -> Unit) {
//    lambda()
//}
//нет слова inline «возврат» здесь не разрешен обычный ретерн запрещен внутри лямбды можем только с метко использовать
////3*. Что нужно добавить, чтобы запретить вызов return из лямбда выражения у inline функции? (нельзя убирать ключевое слово inline!)
//fun main() {
//    println(42)
//    example {
//        return
//    }
//    println(24)
//}

inline fun  example(crossinline lambda: () -> Unit) {
    lambda()
}
//Чтобы указать это, параметр лямбды необходимо отметить модификатором crossinline.
//4**. Помимо проблем с совместимостью, когда ещё полезно использовать модификатор noinline для лямбда выражения inline функции?
//В случае, если вы хотите, чтобы только некоторые лямбды, переданные inline-функции, были встроены, вам необходимо отметить модификатором noinline те функции-параметры, которые встроены не будут.
//5***. Если inline функции позволяют сократит использование памяти, почему по дефолту не все функции inline и почему не рекомендуется использовать inline для больших функций?
//Потому что это влияет на производительность