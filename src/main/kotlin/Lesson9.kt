//1. Деление на ноль:
//Напишите программу, которая принимает два числа от пользователя и выводит
// результат деления первого числа на второе. Обработайте исключение при попытке деления на ноль.
class CustomException(message: String) : Exception("Error. Bad sides of triangle.")
fun main() {
//    println("Введите число 1: ")
//    val c1 = readln().toInt()
//    println("Введите число 2: ")
//    val c2 = readln().toInt()
//    try {
//        val b: Int = c1/c2
//        println(b)
//    } catch(e: Exception) {
//        println("Исключение/деление на ноль!")
//        println(e.message)
//    }
//2. Индекс в строке:
//Напишите программу, которая принимает на вход строку и индекс, а затем выводит
// символ по указанному индексу. Обработайте исключение, которое может возникнуть при выходе за границы строки.
//    println("Введите строку: ")
//    val str = readln().toString()
//    println("Введите индекс: ")
//    val i = readln().toInt()
//    try {
//        println(str[i])
//    } catch(e: Exception) {
//        println("Исключение/за границами строки")
//        println(e.message)
//    }
//3. Работа с массивом:
//Напишите функцию, которая принимает на вход массив чисел и индекс элемента,
// который нужно вернуть. Обработайте исключение, которое может возникнуть, если индекс выходит за пределы массива.
//    println("Введите размер массива: ")
//    val n = readln().toInt()
//    println("Введите массив чисел: ")
//    var arr:Array<Int> = Array(n,{0})
//    for (i in 0..n-1){
//        arr[i] = readln().toInt()
//    }
//    println("Введите индекс: ")
//    val i = readln().toInt()
//    try {
//        println(arr[i])
//    } catch(e: Exception) {
//        println("Исключение/за границами массива")
//        println(e.message)
//    }
//4. Преобразование строки в число:
//Напишите программу, которая запрашивает у пользователя ввод числа в виде строки
// и пытается преобразовать его в число. Обработайте исключение, которое может возникнуть при вводе строки, не являющейся числом.
//    println("Введите числовую строку: ")
//    val num = readln()
//    try {
//        println(num.toInt())
//    } catch(e: Exception) {
//        println("Исключение/не число")
//        println(e.message)
//    }
////6. Пользовательские исключения:
////Создайте пользовательское исключение, например, CustomException.
//// Напишите программу, которая генерирует это исключение при определенных условиях
//// (например, если результат операции больше определенного порога). Обработайте это исключение в блоке catch.
//    println("Введите количество дней в декабре месяце: ")
//    val day = readln().toInt()
//    try {
//        println(day)
//    } catch(e: CustomException) {
//        println("Исключение/в декабре не больше 31 дня")
//            // println(e.message)
//    }
//7. Обработка нескольких исключений:
//Напишите программу, которая сначала генерирует исключение одного типа,
// а затем другого. Обработайте оба исключения с использованием нескольких блоков catch.
//

//8. Использование finally:
//Модифицируйте предыдущую задачу так, чтобы использовать блок finally
// для выполнения кода независимо от того, было ли сгенерировано исключение или нет.
//

//9**. Чтение файла:
//Напишите программу для чтения содержимого файла по заданному пути.
// Обработайте исключение, которое может возникнуть, если файл не существует.
//

//10* Работа с датами:
//Напишите программу, которая запрашивает у пользователя дату в формате "гггг-мм-дд"
// и выводит количество дней до этой даты от текущей. Обработайте исключение при некорректном вводе даты.


////ДОПОЛНИТЕЛЬНО про set
//    val cats = setOf("Мурзик", "Барсик", "Рыжик")
//    println(cats)
////    Если попытаетесь добавить дубликат, то он будет просто отброшен и не попадёт в набор.
////
////    Мы не можем обратиться к нужному элементу по индексу через квадратные скобки, как у List. Но мы можем использовать elementAt()
//    println(cats.elementAt(2))
}